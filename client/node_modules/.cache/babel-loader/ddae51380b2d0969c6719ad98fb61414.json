{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyB_VKUB4ech2JCJwVbu2iJd0b96h8medQg\",\n  authDomain: \"crwn-db-66888.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-66888.firebaseio.com\",\n  projectId: \"crwn-db-66888\",\n  storageBucket: \"crwn-db-66888.appspot.com\",\n  messagingSenderId: \"11139594270\",\n  appId: \"1:11139594270:web:1766d9dfb4a0016742560f\",\n  measurementId: \"G-91LQJY4XFH\"\n}; // checking if exist user and making a new user into db\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // if (userAuth === false) if user not exist\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    // if data doesn't exist\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date(); // say the current date and currnt time\n\n    try {\n      await userRef.set({\n        // create a new object inside DB\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/edenv/Projects/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAI;AACZC,EAAAA,MAAM,EAAE,yCADI;AAEZC,EAAAA,UAAU,EAAE,+BAFA;AAGZC,EAAAA,WAAW,EAAE,sCAHD;AAIZC,EAAAA,SAAS,EAAE,eAJC;AAKZC,EAAAA,aAAa,EAAE,2BALH;AAMZC,EAAAA,iBAAiB,EAAE,aANP;AAOZC,EAAAA,KAAK,EAAE,0CAPK;AAQZC,EAAAA,aAAa,EAAE;AARH,CAAhB,C,CAWE;;AACF,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAG,CAACD,QAAJ,EAAc,OAD6D,CACrD;;AAEtB,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AAEA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAoB;AAAG;AACrB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB,CAFkB,CAEY;;AAE9B,QAAG;AACD,YAAMV,OAAO,CAACW,GAAR,CAAY;AAAG;AACnBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGV;AAJa,OAAZ,CAAN;AAOD,KARD,CAQE,OAAMa,KAAN,EAAa;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCF,KAAK,CAACG,OAAxC;AACD;AACF;;AAED,SAAOf,OAAP;AACD,CAzBM;AA2BP,OAAO,MAAMgB,yBAAyB,GAAG,CAACC,aAAD,EAAgBC,YAAhB,KAAiC;AACxE,QAAMC,aAAa,GAAGlB,SAAS,CAACmB,UAAV,CAAqBH,aAArB,CAAtB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYK,aAAZ;AAEA,QAAME,KAAK,GAAGpB,SAAS,CAACoB,KAAV,EAAd;AACD,CALM;AAOPlC,QAAQ,CAACmC,aAAT,CAAuBlC,MAAvB;AAEA,OAAO,MAAMmC,IAAI,GAAGpC,QAAQ,CAACoC,IAAT,EAAb;AACP,OAAO,MAAMtB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB;AAEP,MAAMuB,QAAQ,GAAG,IAAIrC,QAAQ,CAACoC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAerC,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config =  {\r\n    apiKey: \"AIzaSyB_VKUB4ech2JCJwVbu2iJd0b96h8medQg\",\r\n    authDomain: \"crwn-db-66888.firebaseapp.com\",\r\n    databaseURL: \"https://crwn-db-66888.firebaseio.com\",\r\n    projectId: \"crwn-db-66888\",\r\n    storageBucket: \"crwn-db-66888.appspot.com\",\r\n    messagingSenderId: \"11139594270\",\r\n    appId: \"1:11139594270:web:1766d9dfb4a0016742560f\",\r\n    measurementId: \"G-91LQJY4XFH\"\r\n  };\r\n\r\n  // checking if exist user and making a new user into db\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if(!userAuth) return; // if (userAuth === false) if user not exist\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n\r\n  const snapShot = await userRef.get(); \r\n\r\n  if(!snapShot.exists){  // if data doesn't exist\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date(); // say the current date and currnt time\r\n\r\n    try{\r\n      await userRef.set({  // create a new object inside DB\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      })\r\n  \r\n    } catch(error) {\r\n      console.log('error creating user',error.message);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n}\r\n\r\nexport const addCollectionAndDocuments = (collectionKey, objectsToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  console.log(collectionRef);\r\n\r\n  const batch = firestore.batch();\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}